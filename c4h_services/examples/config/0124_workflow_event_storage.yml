# Path: c4h_services/examples/config/workflow_event_storage.yml

project:
  path: "/Users/jim/src/apps/c4h_ai_dev"  
  workspace_root: "workspaces"

llm_config:
  default_provider: "anthropic"
  default_model: "claude-3-opus-20240229"
  
  agents:
    discovery:
      provider: "anthropic"
      model: "claude-3-opus-20240229"
      temperature: 0
      tartxt_config:
        script_path: "/Users/jim/src/apps/c4h_ai_dev/c4h_agents/skills/tartxt.py"
        input_paths: 
          - "c4h_services"
        exclusions: 
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/*.pyc"
        output_type: "stdout"

    solution_designer:
      provider: "anthropic"
      model: "claude-3-5-sonnet-20241022"
      temperature: 0
      intent:
        description: |
          Enhance the workflow system to support event sourcing style storage and replay capabilities, fixing Prefect flow context handling.

          1. AgentResponse Enhancement
          Add to c4h_agents/agents/base.py:

          @dataclass
          class AgentResponse:
              success: bool
              data: Dict[str, Any]
              error: Optional[str] = None
              input_context: Any = field(default_factory=dict)  # Original input
              prompt: str = ""                                  # Formatted prompt
              raw_response: Any = None                         # Complete response
              timestamp: datetime = field(default_factory=datetime.utcnow)

          2. Workflow Storage Configuration
          Add to config/system_config.yml:

          runtime:
            workflow:
              storage:
                enabled: true
                root_dir: "workspaces/workflows"
                format: "yymmdd_hhmm_{workflow_id}"
                retention:
                  max_runs: 10
                  max_days: 30

          3. Required Imports for c4h_services/src/intent/impl/prefect/workflows.py:
          
          import json
          from pathlib import Path
          from datetime import datetime, timezone
          from typing import Dict, Any, Optional
          from prefect import flow, get_run_logger
          from prefect.context import get_flow_context, FlowRunContext
          from prefect.states import Completed, Failed
          import structlog
          from c4h_agents.agents.base import AgentResponse
          from .tasks import run_agent_task
          from .factories import (
              create_discovery_task,
              create_solution_task,
              create_coder_task
          )

          4. Event Storage Functions
          Add to workflows.py:

          def get_workflow_storage(flow_context: FlowRunContext, config: Dict[str, Any]) -> Optional[Path]:
              storage_config = config.get('runtime', {}).get('workflow', {}).get('storage', {})
              if not storage_config.get('enabled', False):
                  return None
                  
              root_dir = Path(storage_config.get('root_dir', 'workspaces/workflows'))
              format_str = storage_config.get('format', 'yymmdd_hhmm_{workflow_id}')
              
              timestamp = datetime.now().strftime('%y%m%d_%H%M')
              workflow_dir = root_dir / format_str.format(
                  workflow_id=flow_context.flow_run.id,
                  timestamp=timestamp
              )
              
              workflow_dir.mkdir(parents=True, exist_ok=True)
              (workflow_dir / 'events').mkdir(exist_ok=True)
              (workflow_dir / 'config').mkdir(exist_ok=True)
              
              return workflow_dir

          def store_workflow_event(
              storage_dir: Path,
              sequence: int,
              agent: str,
              response: AgentResponse,
              agent_config: Dict[str, Any]
          ) -> None:
              event = {
                  "sequence": sequence,
                  "agent": agent,
                  "timestamp": response.timestamp.isoformat(),
                  "input_context": response.input_context,
                  "prompt": response.prompt,
                  "response": {
                      "success": response.success,
                      "data": response.data,
                      "raw_response": str(response.raw_response)
                  },
                  "agent_config": agent_config
              }
              
              event_file = storage_dir / "events" / f"{sequence:03d}_{agent}.json"
              with open(event_file, 'w') as f:
                  json.dump(event, f, indent=2)

          5. Integration in Basic Workflow
          Modify run_basic_workflow:

          @flow(name="basic_refactoring")
          def run_basic_workflow(
              project_path: Path,
              intent_desc: Dict[str, Any],
              config: Dict[str, Any]
          ) -> Dict[str, Any]:
              flow_context = get_flow_context()
              flow_logger = get_run_logger()
              
              try:
                  storage_dir = get_workflow_storage(flow_context, config)
                  if storage_dir:
                      with open(storage_dir / "config" / "workflow_config.json", 'w') as f:
                          json.dump(config, f, indent=2)

          Make sure that prefect runner is properly configured to handle the new storage capabilities, wiht required imports and context handling.

          Implementation Requirements:
          1. Flow context must be properly initialized
          2. Storage operations must be optional
          3. All operations must be thread-safe
          4. Full error handling required
          5. Agents must remain unaware of storage
          6. Maintain sequence ordering
          7. Keep separation of concerns

          Return changes in standard JSON format with file_path, type, description, and complete content.

    coder:
      provider: "anthropic"
      model: "claude-3-opus-20240229"
      temperature: 0
      backup_enabled: true

runtime:
  workflow:
    storage:
      enabled: true
      root_dir: "workspaces/workflows"
      format: "yymmdd_hhmm_{workflow_id}"
      retention:
        max_runs: 10
        max_days: 30
      subdirs:
        - "events"
        - "config"

logging:
  level: "INFO"
  format: "structured"
  agent_level: "DEBUG"