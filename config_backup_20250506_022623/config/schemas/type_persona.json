{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "C4H Type-Based Persona Configuration",
  "description": "Schema for validating persona configurations in the type-based architecture",
  "type": "object",
  "required": ["version", "persona_key", "llm_configuration"],
  "properties": {
    "version": {
      "type": "string",
      "description": "Schema version"
    },
    "persona_key": {
      "type": "string",
      "description": "Unique identifier for this persona"
    },
    "description": {
      "type": "string",
      "description": "Human-readable description of the persona"
    },
    "llm_configuration": {
      "type": "object",
      "properties": {
        "system_prompt": {
          "type": "string",
          "description": "System prompt for LLM interactions"
        },
        "user_prompt_template": {
          "type": "string",
          "description": "Template for user prompts with variables"
        },
        "prompt_parameters": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "minimum": 0,
              "maximum": 2,
              "description": "Temperature setting for LLM generation"
            },
            "max_tokens": {
              "type": "integer",
              "minimum": 1,
              "description": "Maximum tokens to generate"
            }
          }
        }
      },
      "required": ["system_prompt"]
    },
    "skill_bindings": {
      "type": "object",
      "description": "Bindings for skills available to this persona",
      "patternProperties": {
        "^[a-zA-Z0-9_]+$": {
          "type": "object",
          "required": ["skill_key"],
          "properties": {
            "skill_key": {
              "type": "string",
              "description": "Reference to registered skill in system config"
            },
            "required": {
              "type": "boolean",
              "description": "Whether this skill is required for the persona"
            }
          }
        }
      }
    },
    "execution_plan": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether execution plan is enabled"
        },
        "steps": {
          "type": "array",
          "description": "Sequence of execution steps",
          "items": {
            "type": "object",
            "required": ["name", "type"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of this execution step"
              },
              "type": {
                "type": "string",
                "enum": ["skill", "loop", "conditional", "parallel", "try_catch"],
                "description": "Type of execution step"
              },
              "is_output": {
                "type": "boolean",
                "description": "Whether this step produces a final output"
              },
              "result_mapping": {
                "type": "object",
                "description": "Mapping of step results to output keys"
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {"type": {"const": "skill"}}
                },
                "then": {
                  "required": ["skill"],
                  "properties": {
                    "skill": {
                      "type": "string",
                      "description": "Reference to skill binding"
                    },
                    "parameters": {
                      "type": "object",
                      "description": "Parameters for the skill execution"
                    },
                    "outputs": {
                      "type": "object",
                      "description": "Mapping of skill outputs to context variables"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {"type": {"const": "loop"}}
                },
                "then": {
                  "required": ["iterate_on", "steps"],
                  "properties": {
                    "iterate_on": {
                      "type": "string",
                      "description": "Context path to iterable collection"
                    },
                    "as_variable": {
                      "type": "string",
                      "description": "Variable name for current iteration item"
                    },
                    "steps": {
                      "type": "array",
                      "description": "Steps to execute in each iteration"
                    },
                    "collect_results": {
                      "type": "boolean",
                      "description": "Whether to collect results from all iterations"
                    },
                    "results_variable": {
                      "type": "string",
                      "description": "Variable to store collected results"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {"type": {"const": "conditional"}}
                },
                "then": {
                  "required": ["condition"],
                  "properties": {
                    "condition": {
                      "type": "string",
                      "description": "Condition expression to evaluate"
                    },
                    "then": {
                      "type": "array",
                      "description": "Steps to execute if condition is true"
                    },
                    "else": {
                      "type": "array",
                      "description": "Steps to execute if condition is false"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {"type": {"const": "parallel"}}
                },
                "then": {
                  "required": ["steps"],
                  "properties": {
                    "steps": {
                      "type": "array",
                      "description": "Steps to execute in parallel"
                    },
                    "max_concurrency": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Maximum number of concurrent executions"
                    },
                    "wait_all": {
                      "type": "boolean",
                      "description": "Whether to wait for all steps to complete"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {"type": {"const": "try_catch"}}
                },
                "then": {
                  "required": ["try"],
                  "properties": {
                    "try": {
                      "type": "array",
                      "description": "Steps to attempt execution"
                    },
                    "catch": {
                      "type": "array",
                      "description": "Steps to execute on error"
                    },
                    "finally": {
                      "type": "array",
                      "description": "Steps to always execute"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "required": ["enabled"]
    }
  }
}